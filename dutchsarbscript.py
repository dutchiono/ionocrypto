#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Sep 03, 2021 03:14:07 PM CEST  platform: Windows NT

import sys
import urllib3
http = urllib3.PoolManager(num_pools=50)
from web3 import Web3
from web3.middleware import geth_poa_middleware
import json
from json import loads
from decimal import Decimal
import time
import random
from dutchsconfigfile import privkey, sender
from dutchsconfigaddresses import *
map_tokens = map(Web3.toChecksumAddress, loadTokensToArb)
tokenToArb = list(map_tokens)
tLL = len(tokenToArb)
print(tokenToArb)
print(tLL)
map_routers = map(Web3.toChecksumAddress, loadRouters)
routersList = list(map_routers)
rLL = len(routersList)
print(routersList)
print(rLL)
factoriesList1 = []
priceList = []

private_key_sign = privkey
sender_address = sender
#############################################################################################

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None



if __name__ == '__main__':
    for i in range(0, rLL):
        map_factories1 = web3.eth.contract(address=routersList[i], abi=priceAbi).functions.factory().call()
        factoriesList1.append(map_factories1)
        #print(factoriesList1, "FL1")
    map_factories2 = map(Web3.toChecksumAddress, factoriesList1)
    factoriesList2 = list(map_factories2)
    #print(factoriesList2, "FL2")

    while (True):
        for i in range(0, tLL):
            for f in range(0, rLL):
                factory = factoriesList2[f]
                token = tokenToArb[i]
                tokenContract = web3.eth.contract(token, abi=bananaAbi)
                tokenName = tokenContract.functions.name().call()
                print("Current Swap ",routerName[f])

                pair = web3.eth.contract(address=factory, abi=priceAbi).functions.getPair(token, WBNB).call()
                #print(pair, "pair")
                pair_contract = web3.eth.contract(address=pair, abi=priceAbi)
                #print(pair_contract, "pair_contract")
                (reserve0, reserve1, blockTimestampLast) = pair_contract.functions.getReserves().call()

                print(tokenName, "at router ", routerName[f])
                print(reserve0, " ", tokenName)
                print(reserve1, " BNB")
                price = reserve0/reserve1
                print(Web3.fromWei(price, 'ether'))
                priceList.append([tokenName, price])
                priceList.append(["at", routerName[f]])

            print(priceList)
            if 1 < 2:
                print("genius")
                print(priceList)
                print(" ")
                print(" ")
                print(" ")
                pLL = len(priceList)

                for i in range(0, pLL, 4):
                    j = i+2
                    #print(priceList[i][0])
                    #print(priceList[i][1])
                    print(pLL, "pLL")
                    print(priceList[i][1], priceList[i+1][1])
                    if i < (pLL - 2):
                        print(priceList)
                        if priceList[i][1] < priceList[i+2][1]:
                            print(priceList[i][0], "cheaper at ", priceList[(i+1)][1])
                        if priceList[i][1] > priceList[i+2][1]:
                            print(priceList[i][0], "cheaper at ", priceList[i+3][1])

                    #print(priceList[j][1])
                    print("break")
                    #if priceList[i][1] > priceList[i+2][1]:
                    #    print(priceList[i+1][0], "On Sale at", priceList
                    #print(priceList[0][0]) #tokenName
                    #print(priceList[0][1]) #tokenValue
                    #print(priceList[1][0]) #"at" placeholder
                    #print(priceList[1][1]) #routerLocation
                    #print(priceList[2][0])
                    #print(priceList[2][1])
                    #print(priceList[3][0])
                    #print(priceList[3][1])
        #    else if priceList[f][1] > priceList[f-1]:
        #        print(pricelist[0][0])
            else:
                print(priceList[0][0], priceList[1][1])
            #if priceList.tokenName[0] > price
#if
#    while ()
#        for
#            for



        priceList.clear()
        time.sleep(100)
